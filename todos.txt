prepare_train:
    -> saving weights (last or best)âœ…
    -> specifying train method (how train files are being passed - randomly/ one after another, etc.)âœ…

prepare_dataset module:
    -> read dataset from file/files/train_test_files
    -> obtaining multivariate timeseriesðŸŸ 
    -> 

weight_optimization:
    -> other methods of optimization
    -> optional aggregation weights optimizationâœ…
    -> make passing window transformation function optional

util/data_prep:
    -> different rescaling limitsâœ…
    -> read from arffs (using read_file module)âœ…
    -> add rescaling to data read from arffâœ…
    -> add support for rescaling limits for arff files
    -> get test files from different classâœ…

preprocessing/read_file:
    -> read dimensions from different files OR 
    -> from one fileâœ…
    -> specify class typeâœ…

testing:
    -> modify code to perform testing on arff dataâœ…
    -> calculate errorsâœ…

main:
    -> saving resultsâœ…
    -> universal file namingâœ…
    -> passing dimensions of timeseries as a parameterâœ…

-> early stopping
-> get rid of nans
-> passing files as ranges (23-34: means files 23,24,25,...,34)âœ…
-> prompting values from userâœ…
-> get this module ready to perform our previous calculationsâœ…

input file with parameters:
    -> dataset tr/te pathsâœ…
        -> method of passing files (specific files, randomâœ…, crossvalðŸŸ ) (tr and te)
        -> class of training files
    -> classifier typeâœ…
        -> specific parameters to classifier
    -> output pathâœ…
    -> script for generating input filesâœ…

util/results_aggregation:
    -> perform results aggregation based on resulting .json filesâœ…
    -> 

25.04:
    -> save preds and real test values for some configsâœ…

-> using same train files for different classes (for random and crossval)